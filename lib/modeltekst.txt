const String entries = 'entries';

class EntryFields {
  static final List<String> values = [id, exerciseId, mainWeight, date];

  static const String id = 'entry_id';
  static const String exerciseId = 'exercise_id';
  static const String mainWeight = 'main_weight';
  static const String date = 'date';
}

class Entry {
  final int? id;
  final int exerciseId;
  final double mainWeight;
  final DateTime date;

  const Entry({
    this.id,
    required this.exerciseId,
    required this.mainWeight,
    required this.date,
  });

  Entry copy({
    int? id,
    int? exerciseId,
    double? mainWeight,
    DateTime? date,
  }) =>
      Entry(
        id: id ?? this.id,
        exerciseId: this.exerciseId,
        mainWeight: this.mainWeight,
        date: date ?? this.date,
      );

  Map<String, Object?> toJson() => {
        EntryFields.id: id,
        EntryFields.exerciseId: exerciseId,
        EntryFields.mainWeight: mainWeight,
        EntryFields.date: date.toString(),
      };

  static Entry fromJson(Map<String, Object?> json) => Entry(
        id: json[EntryFields.id] as int?,
        exerciseId: json[EntryFields.exerciseId] as int,
        mainWeight: json[EntryFields.mainWeight] as double,
        date: DateTime.parse(json[EntryFields.date] as String),
      );

  @override
  String toString() {
    return '\t\t\tEntry{\n\t\t\t'
        '  id: $id,\n\t\t\t'
        '  exerciseId: $exerciseId,\n\t\t\t'
        '  mainWeight: $mainWeight,\n\t\t\t'
        '  date: $date\n\t\t\t'
        '}\n';
  }
}

const String exercises = 'exercises';

class ExerciseFields {
  static final List<String> values = [id, name, date, weight, reps, oneRM, notes];

  static const String id = 'exercise_id';
  static const String name = 'name';
  static const String date = 'date';
  static const String weight = 'weight';
  static const String reps = 'reps';
  static const String oneRM = 'oneRM';
  static const String notes = 'notes';
}

class Exercise {
  final int? id;
  final String name;
  final DateTime date;
  final double weight;
  final int reps;
  final double oneRM;
  final String notes;

  const Exercise({
    this.id,
    required this.name,
    required this.date,
    required this.weight,
    required this.reps,
    required this.oneRM,
    required this.notes,
  });

  Exercise copy({
    int? id,
    String? name,
    DateTime? date,
    double? weight,
    int? reps,
    double? oneRM,
    String? notes,
  }) =>
      Exercise(
        id: id ?? this.id,
        name: name ?? this.name,
        date: date ?? this.date,
        weight: weight ?? this.weight,
        reps: reps ?? this.reps,
        oneRM: oneRM ?? this.oneRM,
        notes: notes ?? this.notes,
      );

  Map<String, Object?> toJson() => {
    ExerciseFields.id: id,
    ExerciseFields.name: name,
    ExerciseFields.date: date.toIso8601String(),
    ExerciseFields.weight: weight,
    ExerciseFields.reps: reps,
    ExerciseFields.oneRM: oneRM,
    ExerciseFields.notes: notes,
  };

  static Exercise fromJson(Map<String, Object?> json) => Exercise(
    id: json[ExerciseFields.id] as int?,
    name: json[ExerciseFields.name] as String,
    date: DateTime.parse(json[ExerciseFields.date] as String),
    weight: json[ExerciseFields.weight] as double,
    reps: json[ExerciseFields.reps] as int,
    oneRM: json[ExerciseFields.oneRM] as double,
    notes: json[ExerciseFields.notes] as String,
  );

  @override
  String toString() {
    return 'Exercise{\n'
        '  id: $id,\n'
        '  name: $name,\n'
        '  date: $date,\n'
        '  weight: $weight,\n'
        '  reps: $reps,\n'
        '  oneRM: $oneRM,\n'
        '  notes: $notes\n'
        '}\n';
  }
}
const String sets = 'sets';

class SetFields {
  static final List<String> values = [id, entryId, exerciseId, weight, reps, rir, oneRM];

  static const String id = 'set_id';
  static const String entryId = 'entry_id';
  static const String exerciseId = 'exercise_id';
  static const String weight = 'weight';
  static const String reps = 'reps';
  static const String rir = 'rir';
  static const String oneRM = 'oneRM';

}

class Set {
  final int? id;
  final int entryId;
  final int exerciseId;
  final double weight;
  final int reps;
  final int rir;
  final double oneRM;

  const Set({
    this.id,
    required this.entryId,
    required this.exerciseId,
    required this.weight,
    required this.reps,
    required this.rir,
    required this.oneRM,
  });

  Set copy({
    int? id,
    int? entryId,
    int? exerciseId,
    double? weight,
    int? reps,
    int? rir,
    double? oneRM,
  }) =>
      Set(
        id: id ?? this.id,
        entryId: entryId ?? this.entryId,
        exerciseId: this.exerciseId,
        weight: weight ?? this.weight,
        reps: reps ?? this.reps,
        rir: rir ?? this.rir,
        oneRM: oneRM ?? this.oneRM,
      );

  Map<String, Object?> toJson() => {
    SetFields.id: id,
    SetFields.entryId: entryId,
    SetFields.exerciseId: exerciseId,
    SetFields.weight: weight,
    SetFields.reps: reps,
    SetFields.rir: rir,
    SetFields.oneRM: oneRM,
  };

  static Set fromJson(Map<String, Object?> json) => Set(
    id: json[SetFields.id] as int?,
    entryId: json[SetFields.entryId] as int,
    exerciseId: json[SetFields.exerciseId] as int,
    weight: json[SetFields.weight] as double,
    reps: json[SetFields.reps] as int,
    rir: json[SetFields.rir] as int,
    oneRM: json[SetFields.oneRM] as double,
  );

  @override
  String toString() {
    return '\t\t\t\t\t\tSet{\n\t\t\t\t\t\t'
        '  id: $id,\n\t\t\t\t\t\t'
        '  entryId: $entryId,\n\t\t\t\t\t\t'
        '  exerciseId: $exerciseId,\n\t\t\t\t\t\t'
        '  weight: $weight,\n\t\t\t\t\t\t'
        '  reps: $reps,\n\t\t\t\t\t\t'
        '  rir: $rir,\n\t\t\t\t\t\t'
        '  oneRM: $oneRM\n\t\t\t\t\t\t'
        '}\n';
  }
}